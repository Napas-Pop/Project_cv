import pyto_ui as ui
import pyto_ui as ui
import math
from math import *
import numpy as np
import cv2
import cv2.aruco as aruco
import pandas as pd
from PIL import Image


matrix_coefficients = [[1.25019753e+03, 0.00000000e+00, 8.31027626e+02, ],  # From calibrte camera
                       [0.00000000e+00, 1.24629197e+03, 4.93761478e+02, ],
                       [0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]
distortion_coefficients = [[0.22126322, -0.38411381, -0.01361529, 0.03204828, -0.06211731]]  # From calibrte camera
data_tvecs = []  # Prepare to add tvec
value_dis = []  # Prepare to get result distance(scalar) unit meter
sum_tvec=0
tvec_ini=np.array([0,0,0])
tvec=np.array([0,0,0])
def button_pressed(sender):
    track(matrix_coefficients, distortion_coefficients)  # start to track

def button_r_pressed(sender): #reset zero
    global tvec_ini
    global tvec
    tvec_ini=tvec


def d():
    print('Distance', data_value_dis)  # show distance between tvec

#21:44
def track(matrix_coefficients, distortion_coefficients,tvec_ini):
    global tvec
    sum_tvec=0

    dist=0
    while cap.isOpened():
        # convert image to gray scale image
        # Capture frame-by-frame
        ret, frame = cap.read()
            # operations on the frame come here
        if not ret:
            continue
        frame=cv2.cvtColor(frame,cv2.COLOR_BGR2RGB)
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)  # Change grayscale
        aruco_dict = aruco.Dictionary_get(aruco.DICT_5X5_250)  # Use 5x5 dictionary to find markers
        parameters = aruco.DetectorParameters_create()  # Marker detection parameters
        # lists of ids and the corners beloning to each id
        corners, ids, rejected_img_points = aruco.detectMarkers(gray, aruco_dict,
                                                                parameters=parameters,
                                                                cameraMatrix=np.float32(matrix_coefficients),
                                                                distCoeff=np.float32(distortion_coefficients))
        # calculate(ids,corners,matrix_coefficients,distortion_coefficients,frame)
        if np.all(ids is not None):  # If there are markers found by detector
            for i in range(0, len(ids)):  # Iterate in markers
                # Estimate pose of each marker and return the values rvec and tvec---different from camera coefficients
                rvec, tvec, markerPoints = aruco.estimatePoseSingleMarkers(corners[i], 0.02,
                                                                           np.float32(matrix_coefficients),
                                                                           np.float32(distortion_coefficients))

                (rvec - tvec).any()  # get rid of that nasty numpy value array error
                aruco.drawDetectedMarkers(frame, corners)  # Draw A square around the markers
                aruco.drawAxis(frame, np.float32(matrix_coefficients), np.float32(distortion_coefficients),
                               np.float32(rvec), np.float32(tvec), 0.01)  # Draw Axis

                data_tvecs.append(tvec)  # get every data of tvec in array data_tvecs
                length = len(data_tvecs)  # For easy to calculate equation
                if length > 1:
                    diff = data_tvecs[length - 1] - tvec_ini  # Find distance between tvec(vector)
                    sum_tvec = sqrt(np.sum(diff ** 2))  # convert vector to scalar
                    dist=sum_tvec
                    value_dis.append(np.round(sum_tvec, 6))  # get the distance data(scalar)  in array value
        # Display the resulting frame
        image_in=frame
        image_in = Image.fromarray(image_in)
        vdo.image=image_in
        tvi_text=str(tvec_ini)
        diff_text=str(dist)
        label1.text= 'distance= ' + diff_text +' m'+' Tvec initial'+tvi_text
        data_value_dis = pd.DataFrame(value_dis, columns=['Distance'])
        cv2.circle(frame, (x, y), 3, 255, -1)
        #write text
        # Window name in which image is displayed
        # text
        cv2.circle(frame, markerPoints, 3, 255 ,-1)
        text = 'tvi'+tvi_text
        # font
        font = cv2.FONT_HERSHEY_SIMPLEX
        # org
        org = (markerPoints+10)
        # fontScale
        fontScale =0.4
        # Red color in BGR
        color = (0, 0, 255)
        # Line thickness of 2 px
        thickness = 1
        cv2.putText(frame, text, org, font, fontScale,
                            color, thickness, cv2.LINE_AA, False)

    return


cap = cv2.VideoCapture(0)  # Get the camera source
#GUI Part
view = ui.View()
view.background_color = ui.COLOR_SYSTEM_BACKGROUND
#GUI botton
button = ui.Button(title="record")
button.size = (100, 50)
button.center = (view.width/2+100, (view.height/2+300))
button.flex = [
    ui.FLEXIBLE_TOP_MARGIN,
    ui.FLEXIBLE_BOTTOM_MARGIN,
    ui.FLEXIBLE_LEFT_MARGIN,
    ui.FLEXIBLE_RIGHT_MARGIN
]
button.action = button_pressed
view.add_subview(button)

button_r = ui.Button(title="reset")
button_r.size = (100, 50)
button_r.center = (view.width/2-100, (view.height/2+300))
button_r.flex = [
    ui.FLEXIBLE_TOP_MARGIN,
    ui.FLEXIBLE_BOTTOM_MARGIN,
    ui.FLEXIBLE_LEFT_MARGIN,
    ui.FLEXIBLE_RIGHT_MARGIN
]
button_r.action = button_r_pressed
view.add_subview(button_r)

#show distance
label1 =ui.Label()
label1.size=(view.width,50)
label1.text_alignment=ui.TEXT_ALIGNMENT_CENTER
label1.flex = [ui.FLEXIBLE_WIDTH]
label1.text = "distance"
view.add_subview(label1)

#Capture display
vdo =ui.ImageView()
vdo.size = (400, 500)
vdo.center = (view.width/2, view.height/2)
vdo.flex = [
    ui.FLEXIBLE_TOP_MARGIN,
    ui.FLEXIBLE_BOTTOM_MARGIN,
    ui.FLEXIBLE_LEFT_MARGIN,
    ui.FLEXIBLE_RIGHT_MARGIN
]
view.add_subview(vdo)

ui.show_view(view, ui.PRESENTATION_MODE_SHEET)
